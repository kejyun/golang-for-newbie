












































































[{"body":"題目 傳入 數字列表 及 最後答案加總數值，回傳 最後答案加總數值 是 數字列表 的第幾個跟第幾個數字的加總\n答案 func twoSum(nums_list []int, final_sum_value int) []int { // 數字反向對應表 \tnum_reverse_mapping := make(map[int]int) for key, value := range nums_list { // 判斷是否其他數值存在 \tif other_value_key, is_other_value_exist := num_reverse_mapping[final_sum_value-value]; is_other_value_exist { // 回傳其他數值鍵值 + 目前數值鍵值 \treturn []int{other_value_key, key} } // 設定數值反向對應表：數值 =\u003e 鍵值 \tnum_reverse_mapping[value] = key } return nil } 完整程式碼 package main import ( \"fmt\" ) type question struct { // 參數 \tparameter // 答案 \tanswer } // 參數 type parameter struct { nums_list []int final_sum_value int } // 答案 type answer struct { one []int } func main() { question_list := []question{ { parameter{[]int{3, 2, 4}, 6}, answer{[]int{1, 2}}, }, { parameter{[]int{3, 2, 4}, 5}, answer{[]int{0, 1}}, }, { parameter{[]int{0, 8, 7, 3, 3, 4, 2}, 11}, answer{[]int{1, 3}}, }, { parameter{[]int{0, 1}, 1}, answer{[]int{0, 1}}, }, { parameter{[]int{0, 3}, 5}, answer{[]int{}}, }, } fmt.Printf(\"------------------------Leetcode Problem 1------------------------\\n\") for _, question := range question_list { // _, p := question.answer, question.parameter \tparam := question.parameter fmt.Printf(\"【input】:%v 【output】:%v\\n\", param, twoSum(param.nums_list, param.final_sum_value)) } } func twoSum(nums_list []int, final_sum_value int) []int { // 數字反向對應表 \tnum_reverse_mapping := make(map[int]int) for key, value := range nums_list { // 判斷是否其他數值存在 \tif other_value_key, is_other_value_exist := num_reverse_mapping[final_sum_value-value]; is_other_value_exist { // 回傳其他數值鍵值 + 目前數值鍵值 \treturn []int{other_value_key, key} } // 設定數值反向對應表：數值 =\u003e 鍵值 \tnum_reverse_mapping[value] = key } return nil } 參考資料  0001. Two Sum | LeetCode Cookbook  ","categories":["Golang","教學文件","新手教學","Leetcode","問題","0001 - Two Sum"],"description":"Golang Leetcode 問題: 0001 - Two Sum","excerpt":"Golang Leetcode 問題: 0001 - Two Sum","ref":"/leetcode/question/0001-0100/0001-two-sum/","tags":["Golang","教學文件","新手教學","Leetcode","問題","0001 - Two Sum"],"title":"0001 - Two Sum"},{"body":"","categories":["Golang","教學文件","新手教學","Leetcode","問題"],"description":"Golang Leetcode 問題: 0001~0100","excerpt":"Golang Leetcode 問題: 0001~0100","ref":"/leetcode/question/0001-0100/","tags":["Golang","教學文件","新手教學","Leetcode","問題"],"title":"0001~0100"},{"body":"列印陣列 僅用到陣列 value 數值 nums := []int{2, 3, 4} sum := 0 for _, value := range nums { sum += value } fmt.Println(\"sum:\", sum) 列印陣列 key 及 value var name_list = []string{`Golang`, `Python`, `PHP`} for key, value := range name_list { fmt.Printf(\"language key: %d = %s\\n\", key, value) } // language key: 0 = Golang // language key: 1 = Python // language key: 2 = PHP arr1 := [3][2]int{{1, 2}, {3, 4}, {5, 6}} fmt.Println(arr1) // [[1 2] [3 4] [5 6]]  for key, value := range arr1 { fmt.Printf(\"%d =\u003e %d\\n\", key, value) } // 0 =\u003e [1 2] // 1 =\u003e [3 4] // 2 =\u003e [5 6] ","categories":["Golang","教學文件","新手教學","基礎","for range 迴圈"],"description":"Golang 基礎: for range 迴圈","excerpt":"Golang 基礎: for range 迴圈","ref":"/basic/loop/range/","tags":["Golang","教學文件","新手教學","基礎","for range 迴圈"],"title":"for range"},{"body":"for 一般迴圈 for j := 7; j \u003c= 9; j++ { fmt.Println(j) } // 7 // 8 // 9 for 外部設定初始值  有點類似 while 迴圈\n i := 1 for i \u003c= 3 { fmt.Println(i) i = i + 1 } // 1 // 2 // 3 for 無窮迴圈  若沒有 break 掉的話，會是無窮的迴圈，有點類似 while 迴圈\n for { fmt.Println(\"infinite loop\") break } ","categories":["Golang","教學文件","新手教學","基礎","for 迴圈"],"description":"Golang 基礎: for 迴圈","excerpt":"Golang 基礎: for 迴圈","ref":"/basic/loop/for/","tags":["Golang","教學文件","新手教學","基礎","for 迴圈"],"title":"for"},{"body":"一般變數宣告 一般變數宣告預設值 var num int = 0 var num int 一般變數宣告指定值 var num int = 10 var num = 10 單行宣告  應少用，程式碼可讀性不高\n var name, age, height = \"KJ\", 18, 199.9 多行宣告 var ( name = \"KJ\" age = 18 height = 199.9 ) 多行宣告加入型態 var ( name string = \"KJ\" age uint = 18 height float32 = 199.9 ) 多行宣告沒有設定預設值 var ( name string age uint height float32 ) 短變數宣告 name := \"KJ\" age := 18 height := 199.9 單行短變數宣告  應少用，程式碼可讀性不高\n name, age, height := \"KJ\", 18, 199.9 常數變數宣告 一般常數宣告 const AGE int = 18 單行常數宣告  應少用，程式碼可讀性不高\n const AUTHOR, AGE = \"KJ\", 18 多行常數宣告 const ( AUTHOR = \"KJ\" AGE = 18 ) ","categories":["Golang","教學文件","新手教學","基礎","一般變數"],"description":"Golang 基礎: 一般變數","excerpt":"Golang 基礎: 一般變數","ref":"/basic/data-type/normal/","tags":["Golang","教學文件","新手教學","基礎","一般變數"],"title":"一般"},{"body":"跳脫字元    類型 說明     “雙引號” 可跳脫字元   `重音符` 保留原始字串    a := \"雙引號:可跳脫字元\\t \\n等\" b := `重音符:保留原始字串 \\t \\n 等` fmt.Println(a) fmt.Println(b) // 雙引號:可跳脫字元 // 等 // 重音符:保留原始字串 \\t \\n 等 列印函數 print    類型 說明 description     fmt.Print 列印 print   fmt.Println 列印 + 換行 print + new line   fmt.Printf 格式化列印(沒有換行) format print    fmt.Print 列印 a := `KJ` fmt.Print(a) fmt.Print(a) fmt.Print(a) // KJKJKJ fmt.Println 列印 + 換行 a := `KJ` fmt.Println(a) fmt.Println(a) fmt.Println(a) // KJ // KJ // KJ fmt.Printf 格式化列印 a := `KJ` fmt.Printf(\"a: %v type: %T\\n\", a, a) // a: KJ type: string 儲存列印字串 sprint    類型 說明 description     fmt.str2 儲存列印字串 save print string   fmt.Sprintln 儲存列印字串 + 換行 save print string + new line   fmt.Sprintf 儲存列印格式化字串(沒有換行) save format print string    fmt.Sprint 儲存列印字串 s1 := \"I\" s2 := \"am\" s3 := \"KJ\" str2 := fmt.Sprint(s1, s2, s3) fmt.Println(str2) // IamKJ fmt.Sprintln 儲存列印字串 + 換行  相鄰變數會用空格串接，字串最後會加上換行符號\n s1 := \"I\" s2 := \"am\" s3 := \"KJ\" // 將字串格式化儲存 str1 := fmt.Sprintln(s1, s2, s3) fmt.Println(str1) // I am KJ  fmt.Sprintf 儲存列印格式化字串 name := `KJ` age := 18 introduction := fmt.Sprintf(\"My name is %v. I'm %d years old\\n\", name, age) fmt.Printf(\"Developer said: %s\", introduction) // Developer said: My name is KJ. I'm 18 years old 參考資料  fmt - The Go Programming Language Println vs Printf vs Print in Go - Stack Overflow Go 学习笔记（46）— Go 标准库之 fmt（输入/输出格式化参数、Printf/Fprintf/Sprintf区别、Println/Fprintln/Sprintln 区别）_wohu1104的专栏-CSDN博客 # Day06 Go開教基本語法 (fmt) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天  ","categories":["Golang","教學文件","新手教學","基礎","列印"],"description":"Golang 基礎: 列印","excerpt":"Golang 基礎: 列印","ref":"/basic/print/","tags":["Golang","教學文件","新手教學","基礎","列印"],"title":"列印"},{"body":"一般    類型 說明 description     %v 預設格式 default format   %+v 預設格式加上欄位名稱 default format with field names   %#v golang 語法格式 Go-syntax format   %T golang 資料類型 Go-syntax type of value   %% 百分比符號 percent sign    預設格式 %v a := 26 fmt.Printf(\"a: %v\\n\", a) // a: 26 a := `KJ` fmt.Printf(\"a: %v\\n\", a) // a: KJ type Developer struct { name string age int is_working bool } func main() { fmt.Printf(\"Developer: %v\\n\", Developer{}) // Developer: { 0 false} } 預設格式加上欄位名稱 %+v type Developer struct { name string age int is_working bool } func main() { fmt.Printf(\"Developer: %+v\\n\", Developer{}) // Developer: {name: age:0 is_working:false} } golang 語法格式 %#v a := 26 fmt.Printf(\"a: %#v\\n\", a) // a: 26 a := `KJ` fmt.Printf(\"a: %#v\\n\", a) // a: \"KJ\" var a = []float64{1, 2, 4, 8, 16, 32, 64, 128} fmt.Printf(\"a: %#v\\n\", a) // a: []float64{1, 2, 4, 8, 16, 32, 64, 128} type Developer struct { name string age int is_working bool } func main() { fmt.Printf(\"Developer: %#v\\n\", Developer{}) // Developer: main.Developer{name:\"\", age:0, is_working:false} } golang 資料類型 %T var a = []float64{1, 2, 4, 8, 16, 32, 64, 128} fmt.Printf(\"a: %T\\n\", a) // a: []float64 a := 26 fmt.Printf(\"a: %T\\n\", a) // a: int a := `KJ` fmt.Printf(\"a: %T\\n\", a) // a: string 百分比符號 %% fmt.Printf(\"percent sign: %%\\n\") // percent sign: % 布林值    類型 說明 description     %t 布林值 true or false    布林值 %t a := true fmt.Printf(\"a: %t\\n\", a) // a: true a := 1 fmt.Printf(\"a: %t\\n\", a) // a: %!t(int=1) a := `KJ` fmt.Printf(\"a: %t\\n\", a) // a: %!t(string=KJ) 整數    類型 說明 description     %d 十進位數字 base 10   %b 二進位數字 base 2   %o 八進位數字 base 8   %O 八進位數字 base 8 with 0o prefix   %x 十六進位數字(小寫) base 16 with lower-case   %X 十六進位數字(大寫) base 16 with upper-case   %c 字元 ASCII 字元   %s 字串 一般字串   %U Unicode -    十進位數字 %d a := 10 fmt.Printf(\"a: %d\\n\", a) // a: 10 二進位數字 %b a := 10 fmt.Printf(\"a: %b\\n\", a) // a: 1010 八進位數字 %o %O a := 10 fmt.Printf(\"a: %o\\n\", a) // a: 12 a := 10 fmt.Printf(\"a: %O\\n\", a) // a: 0o12 十六進位數字 %x %X a := 26 fmt.Printf(\"a: %x\\n\", a) // a: 1a a := 26 fmt.Printf(\"a: %X\\n\", a) // a: 1A 字串 %s a := `KJ` fmt.Printf(\"a: %s\\n\", a) // a: KJ a := 75 fmt.Printf(\"a: %s\\n\", a) // a: %!s(int=75) ASCII 字元 %c a := 75 fmt.Printf(\"a: %c\\n\", a) // a: K Unicode 字元 %U a := 26 fmt.Printf(\"a: %U\\n\", a) // a: U+001A 參考資料  fmt - The Go Programming Language # Day06 Go開教基本語法 (fmt) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天  ","categories":["Golang","教學文件","新手教學","基礎","列印格式"],"description":"Golang 基礎: 列印格式","excerpt":"Golang 基礎: 列印格式","ref":"/basic/print/format/","tags":["Golang","教學文件","新手教學","基礎","列印格式"],"title":"格式"},{"body":"","categories":["Golang","教學文件","新手教學","基礎"],"description":"Golang 基礎","excerpt":"Golang 基礎","ref":"/basic/","tags":["Golang","教學文件","新手教學","基礎"],"title":"基礎"},{"body":"整數    類型 min max 範圍     uint8 or byte 0 255 2^0 ~ 2^8   uint16 0 65585 2^0 ~ 2^16   uint32 or rune 0 4294967296 2^0 ~ 2^32   uint64 0 1.84467E+19 2^0 ~ 2^64   int8 -128 128 - 1 -2^7 ~ 2^7 - 1   int16 -32768 32768 - 1 -2^15 ~ 2^15 - 1   int32 -2147483648 2147483648 - 1 -2^31 ~ 2^31 - 1   int64 -9.22337E+18 9.22337E+18 - 1 -2^63 ~ 2^63 - 1    浮點數    類型 min max 範圍     float32 - - -1.410^-45 ~ 3.410^38   float64 - - -4.9410^-324 ~ 1.7910^308    參考資料  [Golang] 程式設計教學：資料型態 (Data Type) | Michael Chen 的技術文件  ","categories":["Golang","教學文件","新手教學","基礎","變數類型"],"description":"Golang 基礎: 變數類型","excerpt":"Golang 基礎: 變數類型","ref":"/basic/data-type/","tags":["Golang","教學文件","新手教學","基礎","變數類型"],"title":"變數類型"},{"body":"陣列 指定陣列大小 var arr [5]int arr[0] = 1 arr[1] = 2 arr[4] = 5 fmt.Println(arr) // [1 2 0 0 5] arr := [5]int{1, 2, 3} fmt.Println(arr) // [1 2 3 0 0] 不指定陣列大小 arr := [...]int{1, 2, 3, 4, 5} fmt.Println(arr) // [1 2 3 4 5] 巢狀陣列 var arr [3][2]int fmt.Println(arr) // [[0 0] [0 0] [0 0]] 指定巢狀陣列預設值 arr1 := [3][2]int{{1, 2}, {3, 4}, {5, 6}} fmt.Println(arr1) // [[1 2] [3 4] [5 6]]  arr2 := [...][2]int{{1, 2}, {3, 4}, {5, 6}} fmt.Println(arr2) // [[1 2] [3 4] [5 6]] 複製陣列 限制陣列長度 arr := [5]int{1, 2, 3, 4, 5} // 指定要複製的陣列 var arr_copy [5]int arr_copy = arr arr_copy[3] = 99 fmt.Println(arr) // [1 2 3 4 5] fmt.Println(arr_copy) // [1 2 3 99 5] 不限制陣列長度  複製的陣列會變成傳址的方式\n arr := []int{1, 2, 3, 4, 5, 6, 7} var arr_copy []int arr_copy = arr arr_copy[3] = 99 fmt.Println(arr) // [1 2 3 99 5 6 7] fmt.Println(arr_copy) // [1 2 3 99 5 6 7] ","categories":["Golang","教學文件","新手教學","基礎","陣列變數"],"description":"Golang 基礎: 陣列變數","excerpt":"Golang 基礎: 陣列變數","ref":"/basic/data-type/array/","tags":["Golang","教學文件","新手教學","基礎","陣列變數"],"title":"陣列"},{"body":"建立 Map 變數 m := make(map[string]int) m[\"key_1\"] = 7 m[\"key_2\"] = 13 fmt.Println(\"map:\", m) // map: map[key_1:7 key_2:13] 取得 Map 鍵值資料 m := make(map[string]int) m[\"key_1\"] = 7 v1 := m[\"key_1\"] fmt.Println(\"v1: \", v1) // v1: 7 Map 資料數量 m := make(map[string]int) m[\"key_1\"] = 7 m[\"key_2\"] = 13 fmt.Println(\"len:\", len(m)) // len: 2 刪除 Map 指定鍵值資料 m := make(map[string]int) m[\"key_1\"] = 7 m[\"key_2\"] = 13 fmt.Println(\"map:\", m) // map: map[key_1:7 key_2:13]  delete(m, \"key_1\") fmt.Println(\"map:\", m) // map: map[key_2:13] 判斷鍵值是否存在 僅需要判斷資料是否存在，沒有需要使用該數值的話，可以將第一個參數設定為 底線 _，用第二個變數來判斷是否存在\nm := make(map[string]int) m[\"key_1\"] = 7 m[\"key_2\"] = 13 _, is_key2_exist := m[\"key_2\"] _, is_key3_exist := m[\"key_3\"] fmt.Println(\"is_key2_exist:\", is_key2_exist) fmt.Println(\"is_key3_exist:\", is_key3_exist) // is_key2_exist: true // is_key3_exist: false 直接指定數值 m := map[string]string{\"name\": `KJ`, \"age\": `18`} fmt.Println(\"developer:\", m) // developer: map[age:18 name:KJ] ","categories":["Golang","教學文件","新手教學","基礎","Map 變數","key-value 陣列"],"description":"Golang 基礎: Map 變數: key-value 陣列","excerpt":"Golang 基礎: Map 變數: key-value 陣列","ref":"/basic/data-type/map/","tags":["Golang","教學文件","新手教學","基礎","Map 變數","key-value 陣列"],"title":"Map 變數: key-value 陣列"},{"body":"","categories":["Golang","教學文件","新手教學","常見問題","語言特性"],"description":"語言特性","excerpt":"語言特性","ref":"/question/feature/","tags":["Golang","教學文件","新手教學","常見問題","語言特性"],"title":"語言特性"},{"body":"接收不會用到的變數參數 在 golang 如果變數有宣告但沒有用到，在編譯的時候是無法順利編譯執行的\n像在 for range 迴圈我們會去取他的 key 跟 value，但 key 對我們來說可能是沒有要用到的變數，這樣執行會出現 key declared but not used 的訊息\nnums := []int{2, 3, 4} sum := 0 for key, value := range nums { sum += value } fmt.Println(\"sum:\", sum) // key declared but not used 對於沒有用途的變數可以用 底線 _ 取做變數指定，這樣就不會建立了不會用到的變數\nnums := []int{2, 3, 4} sum := 0 for _, value := range nums { sum += value } fmt.Println(\"sum:\", sum) // sum: 9 判斷鍵值是否存在 僅需要判斷資料是否存在，沒有需要使用該數值的話，可以將第一個參數設定為 底線 _，用第二個變數來判斷是否存在\nm := make(map[string]int) m[\"key_1\"] = 7 m[\"key_2\"] = 13 _, is_key2_exist := m[\"key_2\"] _, is_key3_exist := m[\"key_3\"] fmt.Println(\"is_key2_exist:\", is_key2_exist) fmt.Println(\"is_key3_exist:\", is_key3_exist) // is_key2_exist: true // is_key3_exist: false 參考資料  variables - What is “_,” (underscore comma) in a Go declaration? - Stack Overflow The blank identifier - Effective Go - The Go Programming Language  ","categories":["Golang","教學文件","新手教學","常見問題","語言特性","底線","underscore comma"],"description":"底線逗號 `_` underscore comma，空白識別字元 blank identifier","excerpt":"底線逗號 `_` underscore comma，空白識別字元 blank identifier","ref":"/question/feature/blank-identifier/","tags":["Golang","教學文件","新手教學","常見問題","語言特性","底線","underscore comma"],"title":"底線逗號 `_` underscore comma"},{"body":"","categories":["Golang","教學文件","新手教學","基礎","迴圈"],"description":"Golang 基礎: 迴圈","excerpt":"Golang 基礎: 迴圈","ref":"/basic/loop/","tags":["Golang","教學文件","新手教學","基礎","迴圈"],"title":"迴圈"},{"body":"建立 slice 變數 employee_list := make([]string, 3) fmt.Println(\"empty employee_list:\", employee_list) employee_list[0] = \"KJ\" employee_list[1] = \"Kay\" employee_list[2] = \"Jay\" fmt.Println(\"all employee:\", employee_list) fmt.Println(\"3rd employee:\", employee_list[2]) // empty employee_list: [ ] // all employee: [KJ Kay Jay] // 3rd employee: Jay employee_list := []string{\"KJ\", \"Kay\", \"Jay\"} fmt.Println(\"all employee:\", employee_list) // all employee: [KJ Kay Jay] var employee_list []string employee_list = append(employee_list, \"KJ\") employee_list = append(employee_list, \"Kay\") employee_list = append(employee_list, \"Jay\") fmt.Println(\"all employee:\", employee_list) fmt.Println(\"3rd employee:\", employee_list[2]) // all employee: [KJ Kay Jay] // 3rd employee: Jay slice 資料數量 employee_list := make([]string, 3) employee_list[0] = \"KJ\" employee_list[1] = \"Kay\" employee_list[2] = \"Jay\" fmt.Println(\"len:\", len(employee_list)) // len: 3 加入 slice 資料 employee_list := make([]string, 3) employee_list[0] = \"KJ\" employee_list[1] = \"Kay\" employee_list[2] = \"Jay\" employee_list = append(employee_list, \"Musk\") employee_list = append(employee_list, \"Bill\", \"Jim\") fmt.Println(\"all employee after append:\", employee_list) // all employee after append: [KJ Kay Jay Musk Bill Jim] 複製 slice 變數  複製的 slice 變數是傳值的方式，所以複製變數的異動不會影響先前的 slice 變數\n employee_list := make([]string, 3) employee_list[0] = \"KJ\" employee_list[1] = \"Kay\" employee_list[2] = \"Jay\" // 複製 slice 變數 copy_employee_list := make([]string, len(employee_list)) copy(copy_employee_list, employee_list) fmt.Println(\"all employee:\", employee_list) fmt.Println(\"all copy employee:\", copy_employee_list) // all employee: [KJ Kay Jay] // all copy employee: [KJ Kay Jay]  // 變更複製的 slice copy_employee_list[2] = \"Change Name\" fmt.Println(\"all employee after change:\", employee_list) fmt.Println(\"all copy employee after change:\", copy_employee_list) // all employee after change: [KJ Kay Jay] // all copy employee after change: [KJ Kay Change Name] 取得指定 slice 範圍的變數 employee_list := make([]string, 6) employee_list[0] = \"KJ\" employee_list[1] = \"Kay\" employee_list[2] = \"Jay\" employee_list[3] = \"Musk\" employee_list[4] = \"Bill\" employee_list[5] = \"Jim\"  slice[\u003c從第幾個元素\u003e:\u003c到第幾個元素(不含此元素)\u003e]\n slice_employee_list := employee_list[2:5] fmt.Println(\"employee_list:\", employee_list) fmt.Println(\"slice_employee_list:\", slice_employee_list) // employee_list: [KJ Kay Jay Musk Bill Jim] // slice_employee_list: [Jay Musk Bill]   slice[:\u003c到第幾個元素(不含此元素)\u003e]\n slice_employee_list := employee_list[:3] fmt.Println(\"employee_list:\", employee_list) fmt.Println(\"slice_employee_list:\", slice_employee_list) // employee_list: [KJ Kay Jay Musk Bill Jim] // slice_employee_list: [KJ Kay Jay]  slice[\u003c從第幾個元素\u003e:]\n slice_employee_list := employee_list[2:] fmt.Println(\"employee_list:\", employee_list) fmt.Println(\"slice_employee_list:\", slice_employee_list) // employee_list: [KJ Kay Jay Musk Bill Jim] // slice_employee_list: [Jay Musk Bill Jim] ","categories":["Golang","教學文件","新手教學","基礎","Slice 變數","進階陣列"],"description":"Golang 基礎: Slice 變數: 進階陣列","excerpt":"Golang 基礎: Slice 變數: 進階陣列","ref":"/basic/data-type/slice/","tags":["Golang","教學文件","新手教學","基礎","Slice 變數","進階陣列"],"title":"Slice 變數: 進階陣列"},{"body":"","categories":["Golang","教學文件","新手教學","常見問題","Debug"],"description":"Debug","excerpt":"Debug","ref":"/question/debug/","tags":["Golang","教學文件","新手教學","常見問題","Debug"],"title":"Debug"},{"body":"在測試除錯時，想要中斷後面的程式，可以使用 os.Exit(0)\n中斷程式沒有錯誤代碼 去中斷整個程式的執行，參數為 0 實則不會列印出錯誤代碼\npackage main import ( \"fmt\" \"os\" ) func main() { fmt.Println(\"Hello World\") // 中斷程式 \tos.Exit(0) // 不會執行 \tfmt.Println(\"Something else...\") } 中斷程式含錯誤代碼 在 os.Exit(1) 帶入參數則可以顯示錯誤代碼\npackage main import ( \"fmt\" \"os\" ) func main() { fmt.Println(\"Exits with status code 1\") // 列印錯誤代碼 \tos.Exit(1) } 參考資料  Exit an Application, With or Without an Error Code · GolangCode Exit with error code in go? - Stack Overflow  ","categories":["Golang","教學文件","新手教學","常見問題","Debug","中斷程式"],"description":"中斷程式","excerpt":"中斷程式","ref":"/question/debug/exit-application/","tags":["Golang","教學文件","新手教學","常見問題","Debug","中斷程式"],"title":"中斷程式"},{"body":"","categories":["Golang","教學文件","新手教學","Leetcode","問題"],"description":"Golang Leetcode 問題","excerpt":"Golang Leetcode 問題","ref":"/leetcode/question/","tags":["Golang","教學文件","新手教學","Leetcode","問題"],"title":"問題"},{"body":"","categories":["Golang","教學文件","新手教學"],"description":"","excerpt":"","ref":"/docs/","tags":["Golang","教學文件","新手教學"],"title":"教學文件"},{"body":"參考資料  GolangCode - A Library of Go Snippets  ","categories":["Golang","教學文件","新手教學","常見問題"],"description":"Golang 常見問題","excerpt":"Golang 常見問題","ref":"/question/","tags":["Golang","教學文件","新手教學","常見問題"],"title":"Golang 常見問題"},{"body":"官方  A Tour of Go  教學網站  Go 語言教學 | 線上程式語言教學練習 GoLang入門基礎: - HackMD GoLang進階語法: - HackMD GoLang 應用範例: - HackMD Learn Go with tests - learn-go-with-tests Introduction - 使用 Golang 打造 Web 應用程式  GitHub - doggy8088/build-web-application-with-golang-zhtw: 使用 Golang 打造 Web 應用程式 (正體中文版)    範例  Go by Example 序 | LeetCode Cookbook  GitHub - halfrost/LeetCode-Go: ✅ Solutions to LeetCode by Go, 100% test coverage, runtime beats 100% / LeetCode 题解    文章  [Golang] 程式設計教學 | Michael Chen 的技術文件  Go 語言筆記(0) — 學這能幹嘛？. 「即將啟程的旅人啊，汝為何而Go?」 | by Jyue Chen | 整個程式都是我的咖啡館 | Medium   從無到有，使用 Go 開發應用程式 :: 2018 iT 邦幫忙鐵人賽  影片  Learn Go Programming - Golang Tutorial for Beginners - YouTube  ","categories":["Golang","教學文件","新手教學","資源"],"description":"Golang 資源","excerpt":"Golang 資源","ref":"/docs/resource/","tags":["Golang","教學文件","新手教學","資源"],"title":"資源"},{"body":"","categories":["Golang","教學文件","新手教學","Leetcode"],"description":"Golang Leetcode","excerpt":"Golang Leetcode","ref":"/leetcode/","tags":["Golang","教學文件","新手教學","Leetcode"],"title":"Leetcode"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0001-two-sum/","tags":"","title":"0001 - Two Sum"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0001-two-sum/","tags":"","title":"0001 - Two Sum"},{"body":"  #td-cover-block-0 { background-image: url(/hugo-background-1_hu348189a7f185b762e60e6aa110cecbb0_75733_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/hugo-background-1_hu348189a7f185b762e60e6aa110cecbb0_75733_1920x1080_fill_catmullrom_bottom_2.png); } }  Golang for newbie Golang 菜雞踩雷學習筆記        記錄學習 Golang 遇到各種不同的系統狀況處理紀錄\n   ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/hugo-background-1_hu348189a7f185b762e60e6aa110cecbb0_75733_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Golang for newbie"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/for-range-%E8%BF%B4%E5%9C%88/","tags":"","title":"for range 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/for-range-%E8%BF%B4%E5%9C%88/","tags":"","title":"for range 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/golang/","tags":"","title":"Golang"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/golang/","tags":"","title":"Golang"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/key-value-%E9%99%A3%E5%88%97/","tags":"","title":"key-value 陣列"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/key-value-%E9%99%A3%E5%88%97/","tags":"","title":"key-value 陣列"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/leetcode/","tags":"","title":"Leetcode"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/leetcode/","tags":"","title":"Leetcode"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/map-%E8%AE%8A%E6%95%B8/","tags":"","title":"Map 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/map-%E8%AE%8A%E6%95%B8/","tags":"","title":"Map 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/slice-%E8%AE%8A%E6%95%B8/","tags":"","title":"Slice 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/slice-%E8%AE%8A%E6%95%B8/","tags":"","title":"Slice 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/underscore-comma/","tags":"","title":"underscore comma"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/underscore-comma/","tags":"","title":"underscore comma"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%95%8F%E9%A1%8C/","tags":"","title":"問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%95%8F%E9%A1%8C/","tags":"","title":"問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%9F%BA%E7%A4%8E/","tags":"","title":"基礎"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%9F%BA%E7%A4%8E/","tags":"","title":"基礎"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C/","tags":"","title":"常見問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C/","tags":"","title":"常見問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%BA%95%E7%B7%9A/","tags":"","title":"底線"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%BA%95%E7%B7%9A/","tags":"","title":"底線"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%95%99%E5%AD%B8%E6%96%87%E4%BB%B6/","tags":"","title":"教學文件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%95%99%E5%AD%B8%E6%96%87%E4%BB%B6/","tags":"","title":"教學文件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/","tags":"","title":"新手教學"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/","tags":"","title":"新手教學"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%AA%9E%E8%A8%80%E7%89%B9%E6%80%A7/","tags":"","title":"語言特性"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%AA%9E%E8%A8%80%E7%89%B9%E6%80%A7/","tags":"","title":"語言特性"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E9%80%B2%E9%9A%8E%E9%99%A3%E5%88%97/","tags":"","title":"進階陣列"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E9%80%B2%E9%9A%8E%E9%99%A3%E5%88%97/","tags":"","title":"進階陣列"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/for-%E8%BF%B4%E5%9C%88/","tags":"","title":"for 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/for-%E8%BF%B4%E5%9C%88/","tags":"","title":"for 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E4%B8%80%E8%88%AC%E8%AE%8A%E6%95%B8/","tags":"","title":"一般變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E4%B8%80%E8%88%AC%E8%AE%8A%E6%95%B8/","tags":"","title":"一般變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%88%97%E5%8D%B0/","tags":"","title":"列印"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%88%97%E5%8D%B0/","tags":"","title":"列印"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%88%97%E5%8D%B0%E6%A0%BC%E5%BC%8F/","tags":"","title":"列印格式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%88%97%E5%8D%B0%E6%A0%BC%E5%BC%8F/","tags":"","title":"列印格式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%AE%8A%E6%95%B8%E9%A1%9E%E5%9E%8B/","tags":"","title":"變數類型"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%AE%8A%E6%95%B8%E9%A1%9E%E5%9E%8B/","tags":"","title":"變數類型"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%BF%B4%E5%9C%88/","tags":"","title":"迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%BF%B4%E5%9C%88/","tags":"","title":"迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E9%99%A3%E5%88%97%E8%AE%8A%E6%95%B8/","tags":"","title":"陣列變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E9%99%A3%E5%88%97%E8%AE%8A%E6%95%B8/","tags":"","title":"陣列變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/debug/","tags":"","title":"Debug"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/debug/","tags":"","title":"Debug"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E4%B8%AD%E6%96%B7%E7%A8%8B%E5%BC%8F/","tags":"","title":"中斷程式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E4%B8%AD%E6%96%B7%E7%A8%8B%E5%BC%8F/","tags":"","title":"中斷程式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%B3%87%E6%BA%90/","tags":"","title":"資源"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%B3%87%E6%BA%90/","tags":"","title":"資源"}]